library(caret)
library(caTools)
data <- read.csv("data.csv", T, ",")
set.seed(256)
split <- sample.split(data, SplitRatio = .75)
train <- subset(data, split == T)
test <- subset(data, split == F)
str(data)
View(data)
data$NSP <- as.factor(data$NSP)
set.seed(256)
split <- sample.split(data, SplitRatio = .75)
train <- subset(data, split == T)
test <- subset(data, split == F)
library(caret)
tuneConrol <- trainConrol(method= "repeatedcv",
number= 10,
repeats = 5,
search= "grid")
tune.grid <- expand.grid(eta= c(0.05,0.075,0.1),
nrounds= c(50,75,100),
max_depth= 6:8,
min_child_weight= c(2.0,2.5,2.75),
colsample_bytree= c(.3,.4,.5),
gamma= 0,
sunsample = 1)
library(caret)
tuneConrol <- trainConrol(method= "repeatedcv",
number= 10,
repeats = 5,
search= "grid")
tuneConrol <- trainControl(method= "repeatedcv",
number= 10,
repeats = 5,
search= "grid")
tune.grid <- expand.grid(eta= c(0.05,0.075,0.1),
nrounds= c(50,75,100),
max_depth= 6:8,
min_child_weight= c(2.0,2.5,2.75),
colsample_bytree= c(.3,.4,.5),
gamma= 0,
sunsample = 1)
model <- train(NSP ~ .,
data= train,
method= "xgbTree",
tuneGrid = tune.grid,
trControl= tuneConrol)
model <- train(NSP ~ .,
data= train,
method= "xgbTree",
trControl= tuneConrol)
predict <- predict(model, test)
confusionMatrix(predict, test$NSP)
output <- predict
output <- data.frame(output)
output
NSP <- data.frame(output)
NSP <- predict
output <- data.frame(NSP)
write.csv(output, "kaggle.csv", row.names = F)
write.csv(output, "kaggle.csv", row.names = T)
train <- read.csv("train.csv", T, ",")
test <- read.csv("test.csv", T, ",")
train$NSP <- as.factor(data$NSP)
test$NSP <- as.factor(test$NSP)
str(train)
train$NSP <- as.factor(train$NSP)
test$NSP <- as.factor(test$NSP)
tuneConrol <- trainControl(method= "repeatedcv",
number= 10,
repeats = 5)
model <- train(NSP ~ .,
data= train,
method= "xgbTree",
trControl= tuneConrol)
predict <- predict(model, test)
confusionMatrix(predict, test$NSP)
NSP <- predict
output <- data.frame(NSP)
write.csv(output, "kaggle.csv", row.names = T)
tuneConrol <- trainControl(method= "repeatedcv",
number= 10,
repeats = 5,
search = "grid")
tune.grid <- expand.grid(eta= c(0.05,0.075,0.1),
nrounds= c(50,75,100),
max_depth= 6:8,
min_child_weight= c(2.0,2.5,2.75),
colsample_bytree= c(.3,.4,.5),
gamma= 0,
subsample = 1)
tune.grid <- expand.grid(eta= c(0.05,0.075,0.1),
nrounds= c(50,75,100),
max_depth= 6:8,
min_child_weight= c(2.0,2.5,2.75),
colsample_bytree= c(.3,.4,.5),
gamma= 0,
subsample = 1)
model <- train(NSP ~ .,
data= train,
method= "xgbTree",
trControl= tuneConrol,
tuneGrid= tune.grid)
library(doParallel)
tuneConrol <- trainControl(method= "repeatedcv",
number= 10,
repeats = 5,
search = "grid")
tune.grid <- expand.grid(eta= c(0.05,0.075,0.1),
nrounds= c(50,75,100),
max_depth= 6:8,
min_child_weight= c(2.0,2.5,2.75),
colsample_bytree= c(.3,.4,.5),
gamma= 0,
subsample = 1)
library(doParallel)
cl <- makePSOCKcluster(2)
registerDoParallel(cl)
model <- train(NSP ~ .,
data= train,
method= "xgbTree",
trControl= tuneConrol,
tuneGrid= tune.grid)
stopCluster(cl)
predict <- predict(model, test)
NSP <- predict
output <- data.frame(NSP)
write.csv(output, "kaggle.csv", row.names = T)
predict
model
predictTrain <- predict(model, train)
confusionMatrix(predict, test$NSP)
confusionMatrix(predict, train$NSP)
confusionMatrix(predictTrain, train$NSP)
predictionTest <- predict(model, test)
NSP <- predictionTest
output <- data.frame(NSP)
write.csv(output, "kaggle.csv", row.names = T)
